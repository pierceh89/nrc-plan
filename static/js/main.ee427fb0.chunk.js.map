{"version":3,"sources":["Pace.js","PaceChart.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["column_seq","inline_columns","convertToMetric","pace","t","split","converted","parseInt","conv_min","Math","floor","conv_sec","round","Pace","props","unit","best","metric_best","valueOf","metric_pace","Object","assign","keys","k","indexOf","convert","mile_pace","map","it","key","kor_headings","kor_metric_headings","Headings","headings","className","line","idx","PaceChart","pace_chart","Nav","Navbar","Brand","href","Toggle","Collapse","Button","variant","onClick","changeMetric","App","state","toggleUnit","bind","current","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee427fb0.chunk.js","sourcesContent":["import React from 'react';\n\nconst column_seq = ['5k', '10k', 'tempo_pace', 'half', 'full', 'recovery_pace'];\nconst inline_columns = ['5k', '10k', 'half', 'full'];\n\nfunction Pace(props) {\n  const unit = props.unit;\n  const [best, pace] = convert(props.mile_pace, props.pace, unit);\n  return (\n    <tr>\n      <td>{best}</td>\n      {column_seq.map((it, key)=> {\n        const idx = inline_columns.indexOf(it);\n        if (idx === -1) return (<td key={key}>{pace[it]}</td>);\n        else return (<td key={key}>\n          {pace[it + \"_record\"]} <br/>\n          {pace[it + \"_pace\"]}\n        </td>);\n      })\n      }\n    </tr>\n  );\n}\n\nfunction convert(best, pace, unit) {\n  if (unit === \"mile\") {\n    return [best, pace];\n  }\n\n  let metric_best = convertToMetric(best.valueOf());\n  let metric_pace = Object.assign({}, pace);\n  for(const k of Object.keys(metric_pace)) {\n    if(k.indexOf('pace') !== -1) {\n      metric_pace[k] = convertToMetric(metric_pace[k]);\n    }\n  }\n\n  return [metric_best, metric_pace];\n}\n\nfunction convertToMetric(pace) {\n  const t = pace.split(\":\");\n  const sec = parseInt(t[0])*60 + parseInt(t[1]);\n  const converted = sec*(1/1.60934);\n  const conv_min = Math.floor(converted / 60);\n  const conv_sec = Math.round(converted % 60);\n  const filling = conv_sec/10 > 1 ? \"\" : \"0\";\n  return \"\" + conv_min + \":\" + filling + conv_sec;\n}\n\n// function _onSelected(e) {\n//   e.preventDefault();\n//   e.target.className = \"row row-selected\";\n// }\n\nexport default Pace;","import React from 'react';\nimport pace_chart from './pace_mile';\nimport Pace from './Pace';\n\n// const headings = ['mile best',\n//   '5k best/avg mile pace',\n//   '10k best/avg mile pace',\n//   'tempo pace',\n//   'half marathon best/avg mile pace',\n//   'full marathon best/avg mile pace',\n//   'recovery pace'];\n\nconst kor_headings = ['1마일 기록',\n  '5km 기록/1마일 페이스',\n  '10km 기록/1마일 페이스',\n  '템포 페이스',\n  '하프 기록/1마일 페이스',\n  '마라톤 기록/1마일 페이스',\n  '리커버리 페이스'];\n\nconst kor_metric_headings = ['1km 기록',\n  '5km 기록/1km 페이스',\n  '10km 기록/1km 페이스',\n  '템포 페이스',\n  '하프 기록/1km 페이스',\n  '마라톤 기록/1km 페이스',\n  '리커버리 페이스'];\n\nfunction PaceChart(props) {\n  const keys = Object.keys(pace_chart);\n  return (\n    <table className=\"table table-hover\">\n      <Headings unit={props.unit}/>\n      <tbody>\n      {keys.map((mile_pace, idx) =>\n        <Pace key={idx} unit={props.unit} mile_pace={mile_pace} pace={pace_chart[mile_pace]}/>)\n      }\n      </tbody>\n    </table>\n  )\n}\n\nfunction Headings(props) {\n  const headings = props.unit === 'metric' ? kor_metric_headings : kor_headings;\n  return (\n    <thead className=\"thead-dark\">\n    <tr>\n      {headings.map((it, key) =>\n        <th key={key} className=\"align-middle\">\n          { it.indexOf('/') === -1 ? it :\n            it.split('/').map((line, idx) =>\n              <span key={idx}>{line}<br/></span>) }\n        </th>\n      )}\n    </tr>\n    </thead>\n  )\n}\n\nexport default PaceChart;","import React from 'react';\nimport {Navbar, Button} from 'react-bootstrap';\n\nfunction Nav(props) {\n  return (\n    <Navbar>\n      <Navbar.Brand href=\"#\">NRC Pace Chart</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Button variant=\"outline-success\" onClick={props.changeMetric}>단위 변환</Button>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport PaceChart from './PaceChart';\nimport Nav from './Nav';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unit: 'metric'\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.toggleUnit = this.toggleUnit.bind(this);\n  }\n\n  toggleUnit() {\n    const current = this.state.unit;\n    this.setState({\n      unit: current === 'metric' ? 'mile' : 'metric'\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav changeMetric={this.toggleUnit} />\n        <header>\n          <h1 className=\"display-1\">\n            페이스 차트\n          </h1>\n        </header>\n        <main className=\"table-responsive-sm\">\n          <PaceChart unit={this.state.unit}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}